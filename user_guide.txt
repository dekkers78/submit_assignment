Welcome to SuperPy - a supermarket management system - that works for you!

						INDEX
						
1. Introduction
2. File structures and setting up
3. Basic commands: 'buy','sell','report', 'time'
4. Plotting a csv file - making graphics bars
5. Common errors and solutions
6. Tips and tricks

1. INTRODUCTION
This program is a command-line interface (CLI) written in Python to manage your supermarket inventory. It has been optimized
to work with the 'bash'-shell. In the destination folder (the folder were the program is installed) you can type: 
python super.py -h
this will give you a help prompt, along with some basic descriptions of each command. 

2. FILE STRUCTURES AND SETTING UP
Make sure you follow all the steps written down on the backside of your floppy to install the program correct!
Once all the files are installed, you can setup the program, please type (for example): python super.py time --set 2024-11-24
Use this format '2024-11-24' and change it to the current date. If you skip this step, you will get an error message:
inner_date.txt not found, and then you will be prompted to set the date as well. Now you don't have to worry about time anymore!!
If you want, you can change the time by typing: 
python super.py --advance-time 2 
This will change the program's perception of the stored time by advancing it with two days! So '2024-11-24' will become '2024-11-26'.
If you want to look at the file structure, please type: 'ls', this will show all the content of the current directory.
The following files are provided with this program package (in alphabetical order):

economic_module.py, financial_summary_year.csv, inventory_module.py, plot_graphics_module.py, super.py, 
test_functions.py, time_module.py. Some files will be created and maintained automatically during the extensive use of this program. 

3. BASIC COMMANDS
The BUY command - If you want to buy products, there's no longer the need to go down to the auction early in the morning, just
type: python super.py buy --product-name coconut --price 4    for example! 
If you don't give an expiration-date e.g.         --expiration-date 2024-10-23 
then it will automatically become a non-food product with date 'None'.
Also if you don't give a certain quantity, e.g.      --quantity 5  , then it will automatically become: quantity = 1.
Take note: --product-name and --price are required fields and cannot be left blank. --price means the price per item (be carefull in combination with quantity).
There will be made a record of the bought items in 'bought.csv', so that the system can calculate the total revenue (by date or even selections of dates).

The SELL command - If you want to track the selling of products, just connect your input method to the system.
Or by typing: python super.py sell --product-name hypebeats --price 29.90    for example! 
It's not necessary to type the expiration-date.
Default quantity will be 1 again. Take note: --product-name and --price are required fields and cannot be left blank.
There will be made a record of the sold items in 'sold.csv', so that the system can calculate the total revenue or even the profit.

The REPORT command - Cannot stand on it's own, so please give a subcommand: inventory, revenue or profit.
Inventory: e.g.    python super.py report inventory --now  
this command will show you what's in the inventory on the current date.
So, if the current date is 2024-10-05, it will show us all items that are in store that have this particular date (please don't confuse this with
the expiration-date).  
python super.py report inventory --yesterday    (will now give us: 2024-10-04).
Use --date to specify a certain date, e.g.     report inventory --date 2024-09-09.
Revenue: python super.py report revenue --yesterday    (will show you the revenue of yesterday or it will display a 0 - meaning no revenue on that day).
(you must fill in --yesterday, --now, or --date 2023-12-12    for example!)
The meaning of revenue is: the total income (revenue sold) generated by a supermarket (or business).
Profit: python super.py report profit --yesterday    (will show you the revenue of yesterday or it will display a 0 - meaning no revenue on that day).
(you must fill in --yesterday, --now, or --date 2023-12-12    for example!)
The meaning of profit is: the total income minus the total costs (bought items) is the profit, and should be a positive number.

The TIME command - type: pyhton super.py time , to see what the current stored time is.
 Use --set, to change the current time to another desired one: python super.py time --set 2024-11-24
Use this format '2024-11-24' and change it to a desired date. This is also usefull for testing purposes.
--advance-time means what it says ;)   so if you type: --advance-time 2   , you advance the time by two days.
Advance-time even works backward (I always wanted to go back in history :) ), please keep the digits small or you have to hunt for food.

4. PLOTTING A CSV FILE
Type: python super.py plot , this will show you some eyecandy. The next (future) version
if this program will give you the ability to plot graphics with more usefull data.

5. COMMON ERRORS AND SOLUTIONS
Date fault
When trying to run the program with inner_date.txt missing, will result in an error. You will be asked to give a correct starting date.

Inventory faults
Trying to ask for an inventory report, when there is no inventory, will result in an error: inventory.csv not found.
Trying to buy a product without using --product-name will give an error, the same goes for leaving the price out.
When correctly giving a buy command for the first time will result in:
'File inventory.csv not found. Creating brand new inventory!' - a help message saying that the inventory.csv file is now created.
'OK' - giving you some positive feedback
Again: if you don't use --expiration-date, the system will think you have a non-food product!

Buying / selling faults
When you buy stuff e.g. on 2024-11-24 and then you sell it on 2024-11-25, the profit of this item will be counted as of that day (11-25),
but the costs (of buying the product) are not so clear! Please take a month, or even a year to look up your profit (so the costs will be taken in as well), etc.
To look up a month, type e.g.: python super.py report profit --date 2024-11. 
Same goes for revenue, type e.g.: python super.py report revenue -date 2024-11
When you try to sell a product and make a typo: e.g. '-1', you will get an error: Price cannot be negative.
Or you do this: '!2', you will get this error: invalid float value.
When there are not enough products in stock, you will get a nice message: Cannot sell ... not enough products in stock.
When you try to sell a product that is not in stock at all, this message appears: ERROR: Product not in stock.

Reporting faults
When you type e.g: python super.py report inventory --tomorrow  , you will get this error message: unrecognized arguments: --tomorrow.
When you type e.g. python super.py report inventory , you will get this error message: You must specify either --date or --now or --yesterday.

6. TIPS AND TRICKS
In the shell, you can use the up and down arrows to scroll through the command history. If the history gets bloated use: history -c.
You can clear the screen with a tissue or you can type the 'clear' command.

Thank you for your attention to read this user guide, have a nice day, bye, bye.











